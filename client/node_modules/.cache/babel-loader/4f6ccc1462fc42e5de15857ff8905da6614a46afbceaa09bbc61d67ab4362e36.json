{"ast":null,"code":"// ---- DAGRE SETUP ----\nimport dagre from \"dagre\";\nconst dagreGraph = new dagre.graphlib.Graph();\ndagreGraph.setDefaultEdgeLabel(() => ({}));\nconst nodeWidth = 320;\nconst nodeHeight = 80;\n\n// ---- DAGRE LAYOUT ----\nconst getLayoutedElements = (nodes, edges) => {\n  dagreGraph.setGraph({\n    rankdir: \"TB\",\n    ranksep: 250,\n    nodesep: 80\n  });\n  nodes.forEach(node => {\n    dagreGraph.setNode(node.id, {\n      width: nodeWidth,\n      height: nodeHeight\n    });\n  });\n  edges.forEach(edge => {\n    dagreGraph.setEdge(edge.source, edge.target);\n  });\n  dagre.layout(dagreGraph);\n  nodes.forEach(node => {\n    const nodeWithPos = dagreGraph.node(node.id);\n    if (!nodeWithPos) return;\n    node.position = {\n      x: nodeWithPos.x - nodeWidth / 2,\n      y: nodeWithPos.y - nodeHeight / 2\n    };\n    node.draggable = true;\n  });\n  return {\n    nodes,\n    edges\n  };\n};\n\n// ---- UTILS FOR HIGHLIGHT ----\nconst buildParentMap = edges => {\n  const parentMap = {};\n  edges.forEach(e => {\n    if (!parentMap[e.target]) parentMap[e.target] = [];\n    parentMap[e.target].push(e.source);\n  });\n  return parentMap;\n};\nconst getAllAncestors = (nodeId, parentMap) => {\n  const visited = new Set();\n  const stack = [nodeId];\n  const ancestorEdges = [];\n  while (stack.length > 0) {\n    const current = stack.pop();\n    const parents = parentMap[current] || [];\n    parents.forEach(p => {\n      ancestorEdges.push({\n        source: p,\n        target: current\n      });\n      if (!visited.has(p)) {\n        visited.add(p);\n        stack.push(p);\n      }\n    });\n  }\n  return ancestorEdges;\n};","map":{"version":3,"names":["dagre","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","nodeWidth","nodeHeight","getLayoutedElements","nodes","edges","setGraph","rankdir","ranksep","nodesep","forEach","node","setNode","id","width","height","edge","setEdge","source","target","layout","nodeWithPos","position","x","y","draggable","buildParentMap","parentMap","e","push","getAllAncestors","nodeId","visited","Set","stack","ancestorEdges","length","current","pop","parents","p","has","add"],"sources":["/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/client/src/Graph.js"],"sourcesContent":["// ---- DAGRE SETUP ----\nimport dagre from \"dagre\";\n\nconst dagreGraph = new dagre.graphlib.Graph();\ndagreGraph.setDefaultEdgeLabel(() => ({}));\n\nconst nodeWidth = 320;\nconst nodeHeight = 80;\n\n// ---- DAGRE LAYOUT ----\nconst getLayoutedElements = (nodes, edges) => {\n  dagreGraph.setGraph({ rankdir: \"TB\", ranksep: 250, nodesep: 80 });\n\n  nodes.forEach((node) => {\n    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });\n  });\n\n  edges.forEach((edge) => {\n    dagreGraph.setEdge(edge.source, edge.target);\n  });\n\n  dagre.layout(dagreGraph);\n\n  nodes.forEach((node) => {\n    const nodeWithPos = dagreGraph.node(node.id);\n    if (!nodeWithPos) return;\n    node.position = {\n      x: nodeWithPos.x - nodeWidth / 2,\n      y: nodeWithPos.y - nodeHeight / 2,\n    };\n    node.draggable = true;\n  });\n\n  return { nodes, edges };\n};\n\n// ---- UTILS FOR HIGHLIGHT ----\nconst buildParentMap = (edges) => {\n  const parentMap = {};\n  edges.forEach((e) => {\n    if (!parentMap[e.target]) parentMap[e.target] = [];\n    parentMap[e.target].push(e.source);\n  });\n  return parentMap;\n};\n\nconst getAllAncestors = (nodeId, parentMap) => {\n  const visited = new Set();\n  const stack = [nodeId];\n  const ancestorEdges = [];\n\n  while (stack.length > 0) {\n    const current = stack.pop();\n    const parents = parentMap[current] || [];\n    parents.forEach((p) => {\n      ancestorEdges.push({ source: p, target: current });\n      if (!visited.has(p)) {\n        visited.add(p);\n        stack.push(p);\n      }\n    });\n  }\n\n  return ancestorEdges;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}