{"ast":null,"code":"import e from \"react\";\nimport t from \"prop-types\";\nimport n from \"cytoscape\";\nconst {\n    string: o,\n    array: l,\n    object: s,\n    number: a,\n    bool: i,\n    oneOfType: r,\n    any: c,\n    func: u\n  } = t,\n  d = {\n    id: o,\n    className: o,\n    style: r([o, s]),\n    elements: r([l, c]),\n    stylesheet: r([l, c]),\n    layout: r([s, c]),\n    pan: r([s, c]),\n    zoom: a,\n    panningEnabled: i,\n    userPanningEnabled: i,\n    minZoom: a,\n    maxZoom: a,\n    zoomingEnabled: i,\n    userZoomingEnabled: i,\n    boxSelectionEnabled: i,\n    autoungrabify: i,\n    autolock: i,\n    autounselectify: i,\n    get: u,\n    toJson: u,\n    diff: u,\n    forEach: u,\n    cy: u,\n    headless: i,\n    styleEnabled: i,\n    hideEdgesOnViewport: i,\n    textureOnViewport: i,\n    motionBlur: i,\n    motionBlurOpacity: a,\n    wheelSensitivity: a,\n    pixelRatio: r([o, s])\n  },\n  p = (e, t) => {\n    if (((e, t) => null == e || null == t)(e, t) && (null != e || null != t)) return !0;\n    if (e === t) return !1;\n    if (\"object\" != typeof e || \"object\" != typeof t) return e !== t;\n    const n = Object.keys(e),\n      o = Object.keys(t),\n      l = n => e[n] !== t[n];\n    return n.length !== o.length || !(!n.some(l) && !o.some(l));\n  },\n  m = (e, t) => null != e ? e[t] : null,\n  y = {\n    diff: p,\n    get: m,\n    toJson: e => e,\n    forEach: (e, t) => e.forEach(t),\n    elements: [{\n      data: {\n        id: \"a\",\n        label: \"Example node A\"\n      }\n    }, {\n      data: {\n        id: \"b\",\n        label: \"Example node B\"\n      }\n    }, {\n      data: {\n        id: \"e\",\n        source: \"a\",\n        target: \"b\"\n      }\n    }],\n    stylesheet: [{\n      selector: \"node\",\n      style: {\n        label: \"data(label)\"\n      }\n    }],\n    zoom: 1,\n    pan: {\n      x: 0,\n      y: 0\n    }\n  },\n  h = (e, t, n, o) => n(m(e, o), m(t, o)),\n  b = (e, t, n, o, l, s, a) => {\n    e.batch(() => {\n      (o === p || h(t, n, o, \"elements\")) && x(e, m(t, \"elements\"), m(n, \"elements\"), l, s, a, o), h(t, n, o, \"stylesheet\") && E(e, m(t, \"stylesheet\"), m(n, \"stylesheet\"), l), [\"zoom\", \"minZoom\", \"maxZoom\", \"zoomingEnabled\", \"userZoomingEnabled\", \"pan\", \"panningEnabled\", \"userPanningEnabled\", \"boxSelectionEnabled\", \"autoungrabify\", \"autolock\", \"autounselectify\"].forEach(s => {\n        h(t, n, o, s) && f(e, s, m(t, s), m(n, s), l);\n      });\n    }), h(t, n, o, \"layout\") && g(e, m(t, \"layout\"), m(n, \"layout\"), l);\n  },\n  f = (e, t, n, o, l) => {\n    e[t](l(o));\n  },\n  g = (e, t, n, o) => {\n    const l = o(n);\n    null != l && e.layout(l).run();\n  },\n  E = (e, t, n, o) => {\n    const l = e.style();\n    null != l && l.fromJson(o(n)).update();\n  },\n  x = (e, t, n, o, l, s, a) => {\n    const i = [],\n      r = e.collection(),\n      c = [],\n      u = {},\n      d = {},\n      p = e => l(l(e, \"data\"), \"id\");\n    s(n, e => {\n      const t = p(e);\n      d[t] = e;\n    }), null != t && s(t, t => {\n      const n = p(t);\n      u[n] = t, (e => null != d[e])(n) || r.merge(e.getElementById(n));\n    }), s(n, e => {\n      const t = p(e),\n        n = (e => u[e])(t);\n      (e => null != u[e])(t) ? c.push({\n        ele1: n,\n        ele2: e\n      }) : i.push(o(e));\n    }), r.length > 0 && e.remove(r), i.length > 0 && e.add(i), c.forEach(({\n      ele1: t,\n      ele2: n\n    }) => O(e, t, n, o, l, a));\n  },\n  O = (e, t, n, o, l, s) => {\n    const a = l(l(n, \"data\"), \"id\"),\n      i = e.getElementById(a),\n      r = {};\n    [\"data\", \"position\", \"selected\", \"selectable\", \"locked\", \"grabbable\", \"classes\"].forEach(e => {\n      const a = l(n, e);\n      s(a, l(t, e)) && (r[e] = o(a));\n    });\n    const c = l(n, \"scratch\");\n    s(c, l(t, \"scratch\")) && i.scratch(o(c)), Object.keys(r).length > 0 && i.json(r);\n  };\nclass w extends e.Component {\n  static get propTypes() {\n    return d;\n  }\n  static get defaultProps() {\n    return y;\n  }\n  static normalizeElements(e) {\n    if (null != e.length) return e;\n    {\n      let {\n        nodes: t,\n        edges: n\n      } = e;\n      return null == t && (t = []), null == n && (n = []), t.concat(n);\n    }\n  }\n  constructor(t) {\n    super(t), this.displayName = \"CytoscapeComponent\", this.containerRef = e.createRef();\n  }\n  componentDidMount() {\n    const e = this.containerRef.current,\n      {\n        global: t,\n        headless: o,\n        styleEnabled: l,\n        hideEdgesOnViewport: s,\n        textureOnViewport: a,\n        motionBlur: i,\n        motionBlurOpacity: r,\n        wheelSensitivity: c,\n        pixelRatio: u\n      } = this.props,\n      d = this._cy = new n({\n        container: e,\n        headless: o,\n        styleEnabled: l,\n        hideEdgesOnViewport: s,\n        textureOnViewport: a,\n        motionBlur: i,\n        motionBlurOpacity: r,\n        wheelSensitivity: c,\n        pixelRatio: u\n      });\n    t && (window[t] = d), this.updateCytoscape(null, this.props);\n  }\n  updateCytoscape(e, t) {\n    const n = this._cy,\n      {\n        diff: o,\n        toJson: l,\n        get: s,\n        forEach: a\n      } = t;\n    b(n, e, t, o, l, s, a), null != t.cy && t.cy(n);\n  }\n  componentDidUpdate(e) {\n    this.updateCytoscape(e, this.props);\n  }\n  componentWillUnmount() {\n    this._cy.destroy();\n  }\n  render() {\n    const {\n      id: t,\n      className: n,\n      style: o\n    } = this.props;\n    return e.createElement(\"div\", {\n      ref: this.containerRef,\n      id: t,\n      className: n,\n      style: o\n    });\n  }\n}\nexport { w as default };","map":{"version":3,"names":["string","o","array","l","object","s","number","a","bool","i","oneOfType","r","any","c","func","u","t","d","id","className","style","elements","stylesheet","layout","pan","zoom","panningEnabled","userPanningEnabled","minZoom","maxZoom","zoomingEnabled","userZoomingEnabled","boxSelectionEnabled","autoungrabify","autolock","autounselectify","get","toJson","diff","forEach","cy","headless","styleEnabled","hideEdgesOnViewport","textureOnViewport","motionBlur","motionBlurOpacity","wheelSensitivity","pixelRatio","p","shallowObjDiff","e","n","Object","keys","length","some","m","y","data","label","source","target","selector","x","h","isDiffAtKey","b","patch","batch","E","f","g","patchJson","val2","run","fromJson","update","collection","merge","getElementById","push","ele1","ele2","remove","add","O","scratch","json","w","Component","propTypes","defaultProps","normalizeElements","nodes","edges","concat","constructor","displayName","containerRef","createRef","componentDidMount","current","global","props","_cy","container","window","updateCytoscape","componentDidUpdate","componentWillUnmount","destroy","render","createElement","ref","default"],"sources":["/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/node_modules/react-cytoscapejs/src/types.js","/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/node_modules/react-cytoscapejs/src/diff.js","/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/node_modules/react-cytoscapejs/src/json.js","/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/node_modules/react-cytoscapejs/src/defaults.js","/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/node_modules/react-cytoscapejs/src/patch.js","/Users/rishikeshmungase/Desktop/Pubmatic/React/data_trail/node_modules/react-cytoscapejs/src/component.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst { string, array, object, number, bool, oneOfType, any, func } = PropTypes;\n\nexport const types = {\n  /**\n   * The `id` HTML attribute of the component.\n   * */\n  id: string,\n\n  /**\n   * The `class` HTML attribute of the component.  Use this to set the dimensions of\n   * the graph visualisation via a style block in your CSS file.\n   */\n  className: string,\n\n  /**\n   * The `style` HTML attribute of the component.  Use this to set the dimensions of\n   * the graph visualisation if you do not use separate CSS files.\n   */\n  style: oneOfType([string, object]),\n\n  /**\n   * The flat list of Cytoscape elements to be included in the graph, each represented\n   * as non-stringified JSON.  E.g.:\n   *\n   * ```\n   * elements: [\n   *   { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\n   *   { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\n   *   { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\n   * ]\n   * ```\n   *\n   * See http://js.cytoscape.org/#notation/elements-json\n   * */\n  elements: oneOfType([array, any]),\n\n  /**\n   * The Cytoscape stylesheet as non-stringified JSON.  E.g.:\n   *\n   * ```\n   * stylesheet: [\n   *   {\n   *      selector: 'node',\n   *      style: {\n   *        'width': 30,\n   *        'height': 30,\n   *        'shape': 'rectangle'\n   *      }\n   *   }\n   * ]\n   * ```\n   *\n   * See http://js.cytoscape.org/#style\n   */\n  stylesheet: oneOfType([array, any]),\n\n  /**\n   * Use a layout to automatically position the nodes in the graph.  E.g.\n   *\n   * ```\n   * layout: { name: 'random' }\n   * ```\n   *\n   * N.b. to use an external layout extension, you must register the extension\n   * prior to rendering this component, e.g.:\n   *\n   * ```\n   * import Cytoscape from 'cytoscape';\n   * import COSEBilkent from 'cytoscape-cose-bilkent';\n   * import React from 'react';\n   * import CytoscapeComponent from 'cytoscape-reactjs';\n   *\n   * Cytoscape.use(COSEBilkent);\n   *\n   * class MyApp extends React.Component {\n   *   render() {\n   *     const elements = [\n   *       { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\n   *       { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\n   *       { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\n   *     ];\n   *\n   *     const layout = { name: 'cose-bilkent' };\n   *\n   *     return <CytoscapeComponent elements={elements} layout={layout}>;\n   *   }\n   * }\n   * ```\n   *\n   * See http://js.cytoscape.org/#layouts\n   */\n  layout: oneOfType([object, any]),\n\n  /**\n   * The panning position of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/pan\n   */\n  pan: oneOfType([object, any]),\n\n  /**\n   * The zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/zoom\n   */\n  zoom: number,\n\n  /**\n   * Whether the panning position of the graph is mutable overall.\n   *\n   * See http://js.cytoscape.org/#init-opts/panningEnabled\n   */\n  panningEnabled: bool,\n\n  /**\n   * Whether the panning position of the graph is mutable by user gestures (e.g. swipe).\n   *\n   * See http://js.cytoscape.org/#init-opts/userPanningEnabled\n   */\n  userPanningEnabled: bool,\n\n  /**\n   * The minimum zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/minZoom\n   */\n  minZoom: number,\n\n  /**\n   * The maximum zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/maxZoom\n   */\n  maxZoom: number,\n\n  /**\n   * Whether the zoom level of the graph is mutable overall.\n   *\n   * See http://js.cytoscape.org/#init-opts/zoomingEnabled\n   */\n  zoomingEnabled: bool,\n\n  /**\n   * Whether the zoom level of the graph is mutable by user gestures (e.g. pinch-to-zoom).\n   *\n   * See http://js.cytoscape.org/#init-opts/userZoomingEnabled\n   */\n  userZoomingEnabled: bool,\n\n  /**\n   * Whether shift+click-and-drag box selection is enabled.\n   *\n   * See http://js.cytoscape.org/#init-opts/boxSelectionEnabled\n   */\n  boxSelectionEnabled: bool,\n\n  /**\n   * If true, nodes automatically can not be grabbed regardless of whether\n   * each node is marked as grabbable.\n   *\n   * See http://js.cytoscape.org/#init-opts/autoungrabify\n   */\n  autoungrabify: bool,\n\n  /**\n   * If true, nodes can not be moved at all.\n   *\n   * See http://js.cytoscape.org/#init-opts/autolock\n   */\n  autolock: bool,\n\n  /**\n   * If true, elements have immutable selection state.\n   *\n   * See http://js.cytoscape.org/#init-opts/autounselectify\n   */\n  autounselectify: bool,\n\n  /**\n   * `get(object, key)`\n   * Get the value of the specified `object` at the `key`, which may be an integer\n   * in the case of lists/arrays or strings in the case of maps/objects.\n   */\n  get: func,\n\n  /**\n   * `toJson(object)`\n   * Get the deep value of the specified `object` as non-stringified JSON.\n   */\n  toJson: func,\n\n  /**\n   * diff(objectA, objectB)\n   * Return whether the two objects have equal value. This is used to determine if\n   * and where Cytoscape needs to be patched.\n   */\n  diff: func,\n\n  /**\n   * forEach(list, iterator)\n   * Call `iterator` on each element in the `list`, in order.\n   */\n  forEach: func,\n\n  /**\n   * cy(cyRef)\n   * The `cy` prop allows for getting a reference to the `cy` Cytoscape object, e.g.:\n   *\n   * `<CytoscapeComponent cy={cy => (myCyRef = cy)} />`\n   */\n  cy: func,\n\n  /**\n   * headless\n   * The `headless` proper allows for setting whether the Cytoscape instance is headless, i.e.\n   * not rendered.  This value can not be changed after initialisation of the component.\n   */\n  headless: bool,\n\n  /**\n   * styleEnabled\n   * The `styleEnabled` flag is used to enable style functionality in a headless instance (i.e.\n   * `headless: true, styleEnabled: true`).  For a rendered instance, do not set this value.\n   */\n  styleEnabled: bool,\n\n  /**\n   * hideEdgesOnViewport\n   * A rendering hint that specifies, for renderers which support the hint, whether edges should\n   * be hidden during zoom and pan operations.\n   */\n  hideEdgesOnViewport: bool,\n\n  /**\n   * textureOnViewport\n   * A rendering hint that specifies, for renderers which support the hint, whether a preview\n   * based on the existing scene should be used in place of building a new scene.\n   */\n  textureOnViewport: bool,\n\n  /**\n   * motionBlur\n   * A rendering hint that specifies, for renderers which support the hint, whether a motion blur\n   * effect should be applied.\n   */\n  motionBlur: bool,\n\n  /**\n   * motionBlurOpacity\n   * A rendering hint that specifies, for renderers which support the hint, how strong the motion\n   * blur effect should be.  The value ranges from 0 to 1, with larger values indicating larger\n   * strength.\n   */\n  motionBlurOpacity: number,\n\n  /**\n   * wheelSensitivity\n   * A rendering hint that specifies, for renderers which support the hint, how fast wheel zooming\n   * should be.  The value is a positive multiplier.  Do not set this value unless you are using\n   * unconventional hardware and can guarantee that all your users will use the same hardware.  The\n   * default value works well for standard mice on common operating systems.  If you change this\n   * value, it is very likely that you will create a bad user experience for many or most of your\n   * users.\n   */\n  wheelSensitivity: number,\n\n  /**\n   * pixelRatio\n   * A rendering hint that specifies, for renderers which support the hint, the pixel ratio that\n   * should be used.  May be 'auto' or a positive number.\n   */\n  pixelRatio: oneOfType([string, object]),\n};\n","const eitherIsNil = (a, b) => a == null || b == null;\n\nexport const hashDiff = (a, b) => {\n  return eitherIsNil(a, b) || a.hash() !== b.hash();\n};\n\nexport const shallowObjDiff = (a, b) => {\n  if (eitherIsNil(a, b) && !(a == null && b == null)) {\n    return true;\n  }\n\n  if (a === b) {\n    // can't do a diff on the same obj\n    return false;\n  }\n\n  // non-object values can be compared with the equality operator\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return a !== b;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  const mismatches = (key) => a[key] !== b[key];\n\n  if (aKeys.length !== bKeys.length) {\n    return true;\n  }\n\n  if (aKeys.some(mismatches) || bKeys.some(mismatches)) {\n    return true;\n  }\n\n  return false;\n};\n","export const get = (obj, key) => (obj != null ? obj[key] : null);\n\nexport const toJson = (obj) => obj;\n\nexport const forEach = (arr, iterator) => arr.forEach(iterator);\n","import { shallowObjDiff } from './diff';\nimport { get, toJson, forEach } from './json';\n\nexport const identity = (x) => x;\n\nexport const elements = [\n  { data: { id: 'a', label: 'Example node A' } },\n  { data: { id: 'b', label: 'Example node B' } },\n  { data: { id: 'e', source: 'a', target: 'b' } },\n];\n\nexport const stylesheet = [\n  {\n    selector: 'node',\n    style: {\n      label: 'data(label)',\n    },\n  },\n];\n\nexport const zoom = 1;\n\nexport const pan = {\n  x: 0,\n  y: 0,\n};\n\nexport const defaults = {\n  diff: shallowObjDiff,\n  get,\n  toJson,\n  forEach,\n  elements,\n  stylesheet,\n  zoom,\n  pan,\n};\n","import { get as atKey } from './json';\nimport { shallowObjDiff } from './diff';\n\nconst isDiffAtKey = (json1, json2, diff, key) =>\n  diff(atKey(json1, key), atKey(json2, key));\n\nexport const patch = (cy, json1, json2, diff, toJson, get, forEach) => {\n  cy.batch(() => {\n    // The shallow object diff() must defer to patchElements() as it must compare the\n    // elements as an unordered set.  A custom diff(), with Immutable for example,\n    // could just use an equality check (===).\n    if (\n      diff === shallowObjDiff ||\n      isDiffAtKey(json1, json2, diff, 'elements')\n    ) {\n      patchElements(\n        cy,\n        atKey(json1, 'elements'),\n        atKey(json2, 'elements'),\n        toJson,\n        get,\n        forEach,\n        diff\n      );\n    }\n\n    if (isDiffAtKey(json1, json2, diff, 'stylesheet')) {\n      patchStyle(\n        cy,\n        atKey(json1, 'stylesheet'),\n        atKey(json2, 'stylesheet'),\n        toJson\n      );\n    }\n\n    [\n      // simple keys that can be patched directly (key same as fn name)\n      'zoom',\n      'minZoom',\n      'maxZoom',\n      'zoomingEnabled',\n      'userZoomingEnabled',\n      'pan',\n      'panningEnabled',\n      'userPanningEnabled',\n      'boxSelectionEnabled',\n      'autoungrabify',\n      'autolock',\n      'autounselectify',\n    ].forEach((key) => {\n      if (isDiffAtKey(json1, json2, diff, key)) {\n        patchJson(cy, key, atKey(json1, key), atKey(json2, key), toJson);\n      }\n    });\n  });\n\n  if (isDiffAtKey(json1, json2, diff, 'layout')) {\n    patchLayout(cy, atKey(json1, 'layout'), atKey(json2, 'layout'), toJson);\n  }\n};\n\nconst patchJson = (cy, key, val1, val2, toJson) => {\n  cy[key](toJson(val2));\n};\n\nconst patchLayout = (cy, layout1, layout2, toJson) => {\n  const layoutOpts = toJson(layout2);\n\n  if (layoutOpts != null) {\n    cy.layout(layoutOpts).run();\n  }\n};\n\nconst patchStyle = (cy, style1, style2, toJson) => {\n  const style = cy.style();\n\n  if (style == null) {\n    return;\n  }\n\n  style.fromJson(toJson(style2)).update();\n};\n\nconst patchElements = (cy, eles1, eles2, toJson, get, forEach, diff) => {\n  const toAdd = [];\n  const toRm = cy.collection();\n  const toPatch = [];\n  const eles1Map = {};\n  const eles2Map = {};\n  const eles1HasId = (id) => eles1Map[id] != null;\n  const eles2HasId = (id) => eles2Map[id] != null;\n  const getEle1 = (id) => eles1Map[id];\n  const getId = (ele) => get(get(ele, 'data'), 'id');\n\n  forEach(eles2, (ele2) => {\n    const id = getId(ele2);\n\n    eles2Map[id] = ele2;\n  });\n\n  if (eles1 != null) {\n    forEach(eles1, (ele1) => {\n      const id = getId(ele1);\n\n      eles1Map[id] = ele1;\n\n      if (!eles2HasId(id)) {\n        toRm.merge(cy.getElementById(id));\n      }\n    });\n  }\n\n  forEach(eles2, (ele2) => {\n    const id = getId(ele2);\n    const ele1 = getEle1(id);\n\n    if (eles1HasId(id)) {\n      toPatch.push({ ele1, ele2 });\n    } else {\n      toAdd.push(toJson(ele2));\n    }\n  });\n\n  if (toRm.length > 0) {\n    cy.remove(toRm);\n  }\n\n  if (toAdd.length > 0) {\n    cy.add(toAdd);\n  }\n\n  toPatch.forEach(({ ele1, ele2 }) =>\n    patchElement(cy, ele1, ele2, toJson, get, diff)\n  );\n};\n\nconst patchElement = (cy, ele1, ele2, toJson, get, diff) => {\n  const id = get(get(ele2, 'data'), 'id');\n  const cyEle = cy.getElementById(id);\n  const patch = {};\n  const jsonKeys = [\n    'data',\n    'position',\n    'selected',\n    'selectable',\n    'locked',\n    'grabbable',\n    'classes',\n  ];\n\n  jsonKeys.forEach((key) => {\n    const data2 = get(ele2, key);\n\n    if (diff(data2, get(ele1, key))) {\n      patch[key] = toJson(data2);\n    }\n  });\n\n  const scratch2 = get(ele2, 'scratch');\n  if (diff(scratch2, get(ele1, 'scratch'))) {\n    cyEle.scratch(toJson(scratch2));\n  }\n\n  if (Object.keys(patch).length > 0) {\n    cyEle.json(patch);\n  }\n};\n","import React from 'react';\nimport { types } from './types';\nimport { defaults } from './defaults';\nimport Cytoscape from 'cytoscape';\nimport { patch } from './patch';\n\n/**\n * The `CytoscapeComponent` is a React component that allows for the declarative creation\n * and modification of a Cytoscape instance, a graph visualisation.\n */\nexport default class CytoscapeComponent extends React.Component {\n  static get propTypes() {\n    return types;\n  }\n\n  static get defaultProps() {\n    return defaults;\n  }\n\n  static normalizeElements(elements) {\n    const isArray = elements.length != null;\n\n    if (isArray) {\n      return elements;\n    } else {\n      let { nodes, edges } = elements;\n\n      if (nodes == null) {\n        nodes = [];\n      }\n\n      if (edges == null) {\n        edges = [];\n      }\n\n      return nodes.concat(edges);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.displayName = 'CytoscapeComponent';\n    this.containerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const container = this.containerRef.current;\n\n    const {\n      global,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio,\n    } = this.props;\n\n    const cy = (this._cy = new Cytoscape({\n      container,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio,\n    }));\n\n    if (global) {\n      window[global] = cy;\n    }\n\n    this.updateCytoscape(null, this.props);\n  }\n\n  updateCytoscape(prevProps, newProps) {\n    const cy = this._cy;\n    const { diff, toJson, get, forEach } = newProps;\n\n    patch(cy, prevProps, newProps, diff, toJson, get, forEach);\n\n    if (newProps.cy != null) {\n      newProps.cy(cy);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateCytoscape(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    this._cy.destroy();\n  }\n\n  render() {\n    const { id, className, style } = this.props;\n\n    return React.createElement('div', {\n      ref: this.containerRef,\n      id,\n      className,\n      style,\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}